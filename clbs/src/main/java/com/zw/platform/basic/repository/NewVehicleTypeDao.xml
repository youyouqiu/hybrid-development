<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zw.platform.basic.repository.NewVehicleTypeDao">
    <delete id="delete">
        UPDATE zw_m_vehicle_type
        set flag             = 0,
            update_data_time = now()
        where flag = 1
          and id = #{id}
    </delete>

    <select id="getByName" resultType="com.zw.platform.basic.dto.VehicleTypeDTO">
    select t.id, t.vehicle_category categoryId, t.vehicle_type type, t.service_cycle,t.description,c.vehicle_category category
    from zw_m_vehicle_type t
    LEFT JOIN zw_m_vehicle_category c on t.vehicle_category = c.id
    where  t.flag = 1
    and  (t.pid is null or t.pid = '')
    and  t.vehicle_type = #{name}
    and c.vehicle_category = #{category}
        limit 1
    </select>

    <select id="getById" resultType="com.zw.platform.basic.dto.VehicleTypeDTO">
    select t.id, t.vehicle_category categoryId, t.vehicle_type type, t.service_cycle,t.description,c.vehicle_category category
    from zw_m_vehicle_type t
    LEFT JOIN zw_m_vehicle_category c on t.vehicle_category = c.id
    where  t.flag = 1
    and  (t.pid is null or t.pid = '')
    and t.id = #{id}
    </select>

    <select id="getByIds" resultType="com.zw.platform.basic.dto.VehicleTypeDTO">
        select t.id, t.vehicle_category categoryId, t.vehicle_type type,
        t.service_cycle,t.description,c.vehicle_category category
        from zw_m_vehicle_type t
        LEFT JOIN zw_m_vehicle_category c on t.vehicle_category = c.id
        where t.flag = 1
        and (t.pid is null or t.pid = '')
        and t.id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <insert id="insert" parameterType="com.zw.platform.basic.domain.VehicleTypeDO">
        INSERT INTO zw_m_vehicle_type
        (
            id,
            vehicle_category,
            vehicle_type,
            description,
            create_data_time,
            create_data_username,
            flag,
            pid,
            ico_id,
            vehicle_subtypes,
            driving_way,
            code_num,
            service_cycle
        )
        values (
            #{id},
            #{vehicleCategory},
            #{vehicleType},
            #{description},
            now(),
            #{createDataUsername},
            1,
            #{pid},
            #{icoId},
            #{vehicleSubtypes},
            #{drivingWay},
            #{codeNum},
            #{serviceCycle}
        )
    </insert>

    <update id="update" parameterType="com.zw.platform.basic.domain.VehicleTypeDO">
        UPDATE zw_m_vehicle_type
        <set>
            vehicle_category = #{vehicleCategory},
            vehicle_type = #{vehicleType},
            description = #{description},
            update_data_time = #{updateDataTime},
            update_data_username = #{updateDataUsername},
            flag = 1,
            pid = #{pid},
            ico_id = #{icoId},
            vehicle_subtypes = #{vehicleSubtypes},
            driving_way = #{drivingWay},
            code_num = #{codeNum},
            service_cycle = #{serviceCycle}
        </set>
        WHERE id = #{id}
    </update>

    <update id="deleteByBatch" parameterType="string">
        UPDATE zw_m_vehicle_type
        set flag = 0,
        update_data_time = now()
        where flag = 1
        and id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>

    <select id="getByKeyword" resultType="com.zw.platform.basic.dto.VehicleTypeDTO">
        select t.id, t.vehicle_category categoryId, t.vehicle_type type,
        t.service_cycle,t.description,c.vehicle_category category,t.code_num
        from zw_m_vehicle_type t
        LEFT JOIN zw_m_vehicle_category c on t.vehicle_category = c.id
        where t.flag = 1
        and (t.pid is null or t.pid = '')
        <if test="keyword != null and keyword != ''">
            and BINARY t.vehicle_type like CONCAT('%',#{keyword},'%')
        </if>
        order by t.code_num,t.create_data_time desc
    </select>

    <select id="getByPage" resultType="com.zw.platform.basic.dto.VehicleTypeDTO"
            parameterType="com.zw.platform.basic.dto.query.VehicleTypePageQuery">
        select t.id, t.vehicle_category categoryId, t.vehicle_type type,
        t.service_cycle,t.description,c.vehicle_category category,t.code_num
        from zw_m_vehicle_type t
        LEFT JOIN zw_m_vehicle_category c on t.vehicle_category = c.id
        where t.flag = 1
        and ISNULL(t.pid )
        <if test="simpleQueryParam != null and simpleQueryParam != ''">
            and BINARY t.vehicle_type like CONCAT('%',#{simpleQueryParam},'%')
        </if>
        order by t.code_num,t.create_data_time desc
    </select>

    <select id="getByCategoryId" resultType="com.zw.platform.basic.dto.VehicleTypeDTO">
        select t.id, t.vehicle_category categoryId, t.vehicle_type type,
        t.service_cycle,t.description,c.vehicle_category category,t.code_num
        from zw_m_vehicle_type t
        INNER JOIN zw_m_vehicle_category c on t.vehicle_category = c.id
        where t.flag = 1
        and (t.pid is null or t.pid = '')
        and t.vehicle_category =#{categoryId}
        ORDER BY  t.create_data_time DESC
    </select>

    <select id="getVehicleBindTypeList" resultType="string">
        SELECT DISTINCT vehicle_type from zw_m_vehicle_info
        where flag = 1
        and vehicle_type in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>


    <insert id="addBatch" parameterType="com.zw.platform.basic.domain.VehicleTypeDO">
        INSERT INTO zw_m_vehicle_type
        (
        id,
        vehicle_category,
        vehicle_type,
        description,
        create_data_time,
        create_data_username,
        flag,
        pid,
        ico_id,
        vehicle_subtypes,
        driving_way,
        code_num,
        service_cycle
        )
        values
        <foreach collection="vehicleTypeList" item="item" index="index" separator=",">
            (
            #{item.id},
            #{item.vehicleCategory},
            #{item.vehicleType},
            #{item.description},
            now(),
            #{item.createDataUsername},
            1,
            #{item.pid},
            #{item.icoId},
            #{item.vehicleSubtypes},
            #{item.drivingWay},
            #{item.codeNum},
            #{item.serviceCycle}
            )
        </foreach>
    </insert>

    <insert id="add" parameterType="com.zw.platform.basic.domain.VehicleTypeDO">
        INSERT INTO zw_m_vehicle_type (id, vehicle_category, vehicle_type, description, create_data_time,
                                       create_data_username, service_cycle)
            VALUE (
                   #{id}, #{vehicleCategory}, #{vehicleType}, #{description}, #{createDataTime}, #{createDataUsername},
                   #{serviceCycle}
            )
    </insert>

    <select id="getByStandard" resultType="com.zw.platform.basic.dto.VehicleTypeDTO">
        select t.id, t.vehicle_category categoryId, t.vehicle_type type,
        t.service_cycle,t.description,c.vehicle_category category,t.code_num
        from zw_m_vehicle_type t
        INNER JOIN zw_m_vehicle_category c on t.vehicle_category = c.id
        where t.flag = 1
        and (t.pid is null or t.pid = '')
        and c.standard =#{standard}
        ORDER BY  t.create_data_time DESC
    </select>

    <select id="getTypeMaps" resultType="java.util.Map">
        SELECT vtype.id                                                   as id,
               CONCAT(vtype.vehicle_type, '(', cat.vehicle_category, ')') as type
        FROM zw_m_vehicle_category cat,
             zw_m_vehicle_type vtype
        WHERE vtype.flag = 1
          and cat.flag = 1
          and vtype.vehicle_category = cat.id
    </select>

    <select id="getByVehicleId" resultType="com.zw.platform.basic.domain.VehicleTypeDO">
        select zmvt.id,
               zmvt.vehicle_category,
               zmvt.vehicle_type,
               zmvt.description,
               zmvt.pid,
               zmvt.ico_id,
               zmvt.vehicle_subtypes,
               zmvt.driving_way,
               zmvt.code_num,
               zmvt.service_cycle
        from zw_m_vehicle_info zmvi
                 inner join zw_m_vehicle_type zmvt on zmvt.id = zmvi.vehicle_type and zmvt.flag = 1
        where zmvi.id = #{vehicleId}
          and zmvi.flag = 1
    </select>

    <select id="findByCategoryIds" resultType="com.zw.platform.basic.domain.VehicleTypeDO">
        SELECT vt.* FROM zw_m_vehicle_type vt
        WHERE vt.flag=1 AND ISNULL(vt.pid) AND vt.vehicle_category in
        <foreach item="item" collection="list" open="(" separator=","
                 close=")">
            #{item}
        </foreach>
        ORDER BY create_data_time DESC
    </select>
    <select id="getVehicleCategoryInfo" resultType="com.zw.platform.domain.basicinfo.VehicleType">
        SELECT vc.*,
               vt.code_num
        FROM zw_m_vehicle_category vc
                 INNER JOIN zw_m_vehicle_type vt ON vt.vehicle_category = vc.id
            AND vc.flag = 1
        WHERE vt.id = #{typeId}
          AND vt.flag = 1
    </select>

    <select id="findByPage" resultType="com.zw.platform.basic.domain.VehicleTypeDO"
            parameterType="com.zw.platform.domain.basicinfo.query.VehicleTypeQuery">
        SELECT vt.* ,vc.vehicle_category category FROM zw_m_vehicle_type vt LEFT JOIN zw_m_vehicle_category vc on
        vt.vehicle_category =vc.id and vc.flag=1
        where vt.flag=1 AND ISNULL(vt.pid)
        <if test="simpleQueryParam != null and simpleQueryParam!=''">
            and vt.vehicle_type LIKE BINARY CONCAT('%',#{simpleQueryParam},'%')
        </if>
        ORDER BY vt.code_num,create_data_time DESC
    </select>

    <select id="getIsBandVehicle" resultType="java.lang.Boolean">
        select count(*)
        from zw_m_vehicle_type vt
                 inner join zw_m_vehicle_info v on v.vehicle_type = vt.id and v.flag = 1
        where vt.flag = 1
          AND ISNULL(vt.pid)
          and vt.id = #{id}
    </select>

    <select id="getByVehicleType" resultType="com.zw.platform.basic.domain.VehicleTypeDO">
        SELECT id,
               vehicle_category,
               vehicle_type,
               description,
               create_data_time,
               create_data_username,
               update_data_time,
               update_data_username,
               pid,
               ico_id,
               vehicle_subtypes,
               driving_way,
               code_num
        FROM zw_m_vehicle_type
        WHERE flag = 1
          AND ISNULL(pid)
          and binary vehicle_type = #{vehicleType}
    </select>

    <select id="findByVehicleTypeAndCategory" resultType="com.zw.platform.basic.domain.VehicleTypeDO">
        SELECT vt.id, vc.standard, vt.code_num
        FROM zw_m_vehicle_type vt
                 INNER JOIN zw_m_vehicle_category vc ON vc.id = vt.vehicle_category AND vc.flag = 1
        WHERE vt.flag = 1
          AND ISNULL(vt.pid)
          AND vt.vehicle_type = BINARY #{vehicleType}
          AND vc.vehicle_category = BINARY #{category}
    </select>

    <select id="getByIdAndVehicleType" resultType="com.zw.platform.basic.domain.VehicleTypeDO">
        SELECT *
        FROM zw_m_vehicle_type
        WHERE flag = 1
          AND ISNULL(pid)
          and vehicle_type = #{vehicleType}
          and id <![CDATA[ <> ]]> #{id}
    </select>

    <select id="checkTypeIsBindingSubType" resultType="java.lang.Boolean">
        SELECT COUNT(*)
        FROM zw_m_vehicle_type
        WHERE flag = 1
          AND pid = #{id}
    </select>

    <select id="findBySubType" resultType="com.zw.platform.domain.basicinfo.form.VehicleSubTypeForm">
        SELECT *
        FROM zw_m_vehicle_type
        WHERE flag = 1
          AND pid = #{id}
        ORDER BY create_data_time DESC
    </select>

    <select id="findByStandard" resultType="com.zw.platform.basic.domain.VehicleTypeDO">
        SELECT vt.*, vc.vehicle_category category
        FROM zw_m_vehicle_type vt
                 INNER JOIN zw_m_vehicle_category vc on vt.vehicle_category = vc.id and vc.flag = 1
        where vt.flag = 1
          AND ISNULL(vt.pid)
          AND vc.standard = #{standardInt}
        ORDER BY create_data_time DESC
    </select>
</mapper>